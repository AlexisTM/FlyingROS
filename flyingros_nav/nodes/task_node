#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
task_node

The task node instanciate tasks.py (taskController) and gives 
the ability to add/remove/pull tasks and missions.

You can choose whether or not to spin the controller. Stoping the spinning
allows to get back the manual control. 

TODO : Managing errors adding/removing tasks by checking task sanity.

FlyingROS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

FlyingROS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with FlyingROS.  If not, see <http://www.gnu.org/licenses/>.

Software created by Alexis Paques and Nabil Nehri for the UCL
in a Drone-Based Additive Manufacturing of Architectural Structures
project financed by the MIT Seed Fund

Originaly published by Vladimir Ermakov (c) 2015 under GNU GPLv3
Copyright (c) Alexis Paques 2016
Copyright (c) Nabil Nehri 2016
"""

import rospy
import mavros
from flyingros_msgs.msg import Task, Mission
from flyingros_msgs.srv import TaskRequest, MissionRequest, TaskHandle, MissionHandle, TaskRequestResponse, MissionRequestResponse, TaskHandleResponse, MissionHandleResponse
from std_srvs.srv import SetBool, SetBoolResponse
from geometry_msgs.msg import PoseStamped, Point
from mavros.utils import *
from flyingros_libs.tasks import *
import sys

def handle_spinning(req):
    global Controller, spinning
    if req.data :
        Controller.spin()
        spinning = True
        return SetBoolResponse(True, "Spinning enabled")
    else :
        Controller.stopSpin()
        spinning = False
        return SetBoolResponse(True, "Spinning disabled")

def handle_add_task(req):
    global Controller
    py_task = Controller.addTask(rostask_to_pythontask(req.task))
    return TaskHandleResponse(str(py_task.ID), True)

def handle_remove_task(req):
    global Controller
    success = Controller.removeTask(req.task.ID)
    return TaskHandleResponse(str(success), False if success == None else True)

def handle_get_task(req):
    global Controller
    py_task = Controller.getTask(req.index)
    task = pythontask_to_rostask(py_task)
    return TaskRequestResponse(task, True)

def handle_remove_mission(req):
    global Controller
    Controller.reset()
    return MissionRequestResponse(Mission(), True)

def handle_add_mission(req):
    global Controller
    mission = list()
    for i in req.mission.tasks :
        mission.append(rostask_to_pythontask(i))
    Controller.addTasks(mission)
    return MissionHandleResponse("Allright", True)

def handle_get_whole_mission(req):
    global Controller
    tasks = Controller.getTasks()
    ros_mission = Mission()
    for task in tasks :
        ros_mission.tasks.append(pythontask_to_rostask(task))
    return MissionRequestResponse(ros_mission, True)

def publish_current(py_task):
    global current_pub
    if py_task is not None:
      ros_task = pythontask_to_rostask(py_task)
      current_pub.publish(ros_task)

def myhook():
    rospy.loginfo("Shutting down")
    rospy.signal_shutdown("ROSPy Shutdown")

def main():
    global spinning
    current_notifier_period = rospy.get_param("flyingros/controller/current_notifier_sleep", 5)
    if spinning : 
      Controller.spin()
    while not rospy.is_shutdown(): 
        Controller.notifyCurrentTask()
        rospy.sleep(current_notifier_period)

def task_feeder():
    global Controller
    Controller.addTask(init_UAV("Init", sleep=10))
    Controller.addTask(arm("Arming", timeout=1))
    time.sleep(10)
    position, yaw = Controller.UAV.getPosition()
    #Controller.addTask(takeoff("Takeoff"))
    Controller.addTask(target("Position 1 meter", Point(position.x, position.y, 1.0),0))
    Controller.addTask(loiter("Wait 5 seconds", 5))
    Controller.addTask(target("Position 1 meter", Point(position.x, position.y, 0.5),0))
    Controller.addTask(land("Landing incoming"))
    Controller.addTask(disarm("Shutdown now"))

def subscribers():
    global current_pub
    # Publisher
    current_pub     = rospy.Publisher('flyingros/controller/task/current', Task, queue_size=1)

    # Services
    # - missions
    mission_add_srv     = rospy.Service('flyingros/controller/mission/add', MissionHandle, handle_add_mission)
    mission_get_srv     = rospy.Service('flyingros/controller/mission/get', MissionRequest, handle_get_whole_mission)
    mission_remove_srv  = rospy.Service('flyingros/controller/mission/remove', MissionRequest, handle_remove_mission)
    # - tasks
    task_add_srv        = rospy.Service('flyingros/controller/task/add', TaskHandle, handle_add_task)
    task_get_srv        = rospy.Service('flyingros/controller/task/get', TaskRequest, handle_get_task)
    task_remove_srv     = rospy.Service('flyingros/controller/task/remove', TaskHandle, handle_remove_task)
    # - spinning
    spin_enable_srv     = rospy.Service('flyingros/controller/spinning', SetBool, handle_spinning)
    

def init():
    # Input data
    # Objects
    global Controller, spinning
    # Node initiation
    rospy.init_node('task_controller', disable_signals=False)
    # Data initiation

    rospy.on_shutdown(myhook)
    spinning = rospy.get_param("flyingros/controller/spinning", True)
    rate = rospy.get_param("flyingros/controller/rate",3)
    testMode = rospy.get_param("flyingros/controller/testMode",False)
    setpoint_rate = rospy.get_param("flyingros/controller/setpoint_rate",10)
    Controller = taskController(rate=rate, setpoint_rate=setpoint_rate, callback_current_task=publish_current,test=testMode)

if __name__ == '__main__':
    rospy.loginfo("We are ready")
    try:
        init()
        subscribers()
        main()
    except rospy.ROSInterruptException:
        rospy.loginfo("init failed")
        pass
