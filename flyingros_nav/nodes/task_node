#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
task_node

This script sends positions to control the UAV in X, Y, Z using the
task controller

FlyingROS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

FlyingROS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with FlyingROS.  If not, see <http://www.gnu.org/licenses/>.

Software created by Alexis Paques and Nabil Nehri for the UCL
in a Drone-Based Additive Manufacturing of Architectural Structures
project financed by the MIT Seed Fund

Originaly published by Vladimir Ermakov (c) 2015 under GNU GPLv3
Copyright (c) Alexis Paques 2016
Copyright (c) Nabil Nehri 2016
"""

import rospy
import mavros
import time
from getch import *
from threading import Thread
from flyingros_msgs.msg import Task, Mission
from flyingros_msgs.srv import TaskRequest, MissionRequest, TaskHandle, MissionHandle, TaskRequestResponse, MissionRequestResponse, TaskHandleResponse, MissionHandleResponse
from geometry_msgs.msg import PoseStamped, Point
from mavros.utils import *
from flyingros_libs.tasks import *
import sys

def handle_add_task(req):
    global Controller
    Controller.addTask(req.task)
    return TaskHandleResponse("Allright", True)

def handle_remove_task(req):
    global Controller
    # remove task
    pass

def handle_get_task(req):
    global Controller
    # one task by ID
    pass

def handle_add_mission(req):
    global Controller
    Controller.addTasks(req.mission)
    return MissionHandleResponse("Allright", True)

def handle_get_whole_mission(req):
    global Controller
    tasks = Controller.getTasks()
    return MissionRequestResponse(tasks, True)

def main():
    rospy.spin()

def task_feeder():
    global Controller
    Controller.addTask(init_UAV("Init", sleep=10))
    Controller.addTask(arm("Arming", timeout=1))
    time.sleep(10)
    position, yaw = Controller.UAV.getPosition()
    #Controller.addTask(takeoff("Takeoff"))
    Controller.addTask(target("Position 1 meter", Point(position.x, position.y, 1.0),0))
    Controller.addTask(loiter("Wait 5 seconds", 5))
    Controller.addTask(target("Position 1 meter", Point(position.x, position.y, 0.5),0))
    Controller.addTask(land("Landing incoming"))
    Controller.addTask(disarm("Shutdown now"))

def subscribers():
    # Publisher
    current_pub     = rospy.Publisher('flyingros/controller/task/current', Task, queue_size=1)

    # Services
    # - missions
    mission_add_srv     = rospy.Service('flyingros/controller/mission/add', MissionHandle, handle_add_mission)
    mission_get_srv     = rospy.Service('flyingros/controller/mission/get', MissionRequest, handle_get_whole_mission)
    # - tasks
    task_add_srv        = rospy.Service('flyingros/controller/task/add', TaskHandle, handle_add_task)
    task_add_srv        = rospy.Service('flyingros/controller/task/get', TaskRequest, handle_get_task)
    task_remove_srv     = rospy.Service('flyingros/controller/task/remove', TaskHandle, handle_remove_task)


def init():
    # Input data
    # Objects
    global Controller
    # Node initiation
    rospy.init_node('laserpack_control')
    # Data initiation
    Controller = taskController(rate=3, setpoint_rate=10)

if __name__ == '__main__':
    rospy.loginfo("We are ready")
    try:
        init()
        subscribers()
        task_feeder()
        main()
    except rospy.ROSInterruptException:
        rospy.loginfo("init failed")
        pass
