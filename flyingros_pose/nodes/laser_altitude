#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
rtk.py

rtk.py publish /flyingros/laser/altitude as a Float64 packet

This file is a part of FlyingROS

FlyingROS free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

FlyingROS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with FlyingROS.  If not, see <http://www.gnu.org/licenses/>.

Software created by Alexis Paques and Nabil Nehri for the UCL
in a Drone-Based Additive Manufacturing of Architectural Structures
project financed by the MIT Seed Fund

Copyright (c) Alexis Paques 2016
"""


from __future__ import division
import rospy

from std_msgs.msg import Float64
from flyingros_msgs.msg import Distance

def raw_lasers_callback(data):
    global altitude_pub, laser_altitude
    mean_laser = float(lasers_raw.lasers[0] + lasers_raw.lasers[1]) / 200.0
    laser_altitude.data = ((mean_laser*cos(imu_euler.roll))**2 + (mean_laser*cos(imu_euler.pitch))**2)**0.5
    altitude_pub.pub(laser_altitude)

def init():
    # Global initialisation
    global rtkPosition, laser_altitude
    
    laser_altitude = Float64()

    rospy.init_node('laser_altitude')
    # Subscribers & Publishers
    altitude_pub     = rospy.Publisher('flyingros/lasers/altitude', Float64, queue_size=1)
    lasers_sub     = rospy.Subscriber('flyingros/lasers/raw', Distance, raw_lasers_callback)

    rospy.spin()


if __name__ == '__main__':
    rospy.loginfo("laser altitude started")
    try:
        init()
    except rospy.ROSInterruptException:
        rospy.loginfo("laser altitude init failed")
        pass