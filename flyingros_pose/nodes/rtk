#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
rtk.py

rtk.py converts Odometry from the piksi to a /flyingros/rtk/position as a PointStamped packet

This file is a part of FlyingROS

FlyingROS free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

FlyingROS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with FlyingROS.  If not, see <http://www.gnu.org/licenses/>.

Software created by Alexis Paques and Nabil Nehri for the UCL
in a Drone-Based Additive Manufacturing of Architectural Structures
project financed by the MIT Seed Fund

Copyright (c) Alexis Paques 2016
"""


from __future__ import division
import rospy

from geometry_msgs.msg import PointStamped
from nav_msgs.msg import Odometry

def piksi_callback(data):
    global rtkPosition, rtk_pub
    rtkPosition.header = data.header
    rtkPosition.point = data.pose.pose.position
    rtk_pub.publish(rtkPosition)
    
def init():
    # Global initialisation
    global rtkPosition, rtk_pub
    
    rtkPosition = PointStamped()

    rospy.init_node('rtk_to_point')

    # Subscribers & Publishers
    rtk_pub     = rospy.Publisher('flyingros/rtk/position', PointStamped, queue_size=1)
    gps_sub     = rospy.Subscriber('gps/rtkfix', Odometry, piksi_callback)

    rospy.spin()


if __name__ == '__main__':
    rospy.loginfo("RTK to Point")
    try:
        init()
    except rospy.ROSInterruptException:
        rospy.loginfo("init rtk.py failed")
        pass