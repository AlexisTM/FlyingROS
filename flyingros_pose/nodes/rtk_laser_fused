#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
rtk.py

rtk.py publish /flyingros/pose/rtk_laser_fused as a PoseStamped packet

This file is a part of FlyingROS

FlyingROS free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ILPS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ILPS.  If not, see <http://www.gnu.org/licenses/>.

Software created by Alexis Paques and Nabil Nehri for the UCL
in a Drone-Based Additive Manufacturing of Architectural Structures
project financed by the MIT Seed Fund

Copyright (c) Alexis Paques 2016
"""


from __future__ import division
import rospy

from geometry_msgs.msg import Pose, PoseStamped
from std_msgs.msg import Float64

def mocap_publish():
    global position
    global rtk_fused_publisher
    global position_count
    rate = rospy.Rate(10)
    
    # default zero orientation
    position.pose.orientation.x = 0
    position.pose.orientation.y = 0
    position.pose.orientation.z = 0
    position.pose.orientation.w = 1
    
    while not rospy.is_shutdown():
        position.header.stamp = rospy.Time.now()
        position.header.seq = position_count
        rtk_fused_publisher(position)
        position_count = position_count + 1
        rate.sleep()


def laser_altitude_callback(data):
    global position
    position.pose.z = data.data.z

def rtk_pose(data):
    global position
    position.pose.x = data.pose.x
    position.pose.y = data.pose.y
    
def init():
    global position, position_count, rtk_fused_publisher
    
    position = PoseStamped()

    rospy.init_node('rtk_laser_fused')

    # Subscribers & Publishers
    rtk_fused_publisher     = rospy.Publisher('flyingros/pose/rtk_laser_fused', PoseStamped, queue_size=1)
    rtk_sub     = rospy.Subscriber('flyingros/rtk/', Odometry, rtk_pose)
    laser_altitude_sub   = rospy.Subscriber('flyingros/lasers/raw', Distance, laser_altitude_callback)

    rospy.spin()


if __name__ == '__main__':
    rospy.loginfo("rtk laser fuse started")
    try:
        init()
    except rospy.ROSInterruptException:
        rospy.loginfo("rtk laser fuse failed")
        pass